689. Maximum Sum of 3 Non-Overlapping Subarrays

In a given array nums of positive integers, find three non-overlapping subarrays with maximum sum.

Each subarray will be of size k, and we want to maximize the sum of all 3*k entries.

Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.

Example:

Input: [1,2,1,2,6,7,5,1], 2
Output: [0, 3, 5]
Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].
We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.
 

Note:

nums.length will be between 1 and 20000.
nums[i] will be between 1 and 65535.
k will be between 1 and floor(nums.length / 3).



class Solution {
    /*
      The maximum sum of all 3 subarrays.
      If the middle subarray's range is[i, i + k - 1], then the right subarray's range is [i + k, n - 1], 
      and the left subarray's range is [0, i - 1]
      i >= k, and because of i + k - 1 <= n - k - 1, the upper bound of i is i <= n - 2k
      
      The idea is that the first pass is to handle the left subarray and save the results, and then the second
      pass is to handle the right subarray and save the results, and the last round is going through (k <= i <= n - 2k),
      and calculating the sums of three parts, and updating the maximum.
    */
    
    public int[] maxSumOfThreeSubarrays(int[] nums, int k) {
        int n = nums.length;
        int[] sum = new int[n + 1], left = new int[n], right = new int[n];
        int[] ans = new int[3];
        
        for (int i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];
        }
        // The first pass is to store the starting index of the max sum subarray before i
        // This starting index is used to calculate the sum of left subarray in the third pass
        for (int i = k, tot = sum[k] - sum[0]; i < n; i++) {
            if (sum[i + 1] - sum[i + 1 - k] > tot) {
                left[i] = i + 1 - k;
                tot = sum[i + 1] - sum[i + 1 -k];
            } else {
                left[i] = left[i - 1];
            }
        }
        
        // The second pass is to store the starting index of the max sum subarray after i
        right[n - k] = n - k;
        for (int i = n - 1 - k, tot = sum[n] - sum[n - k]; i >= 0; i--) {
            if (sum[i + k] - sum[i] >= tot) {
                right[i] = i;
                tot = sum[i + k] - sum[i];
            } else {
                right[i] = right[i + 1];
            }
        }
        
        // The third pass is going through k <= i <= n - 2k, which is the range of the starting index of
        // middle subarray, and put the sums of all there parts together to update the maximum
        int maximum = 0;
        for (int i = k; i <= n - 2 * k; i++) {
            int l = left[i - 1], r = right[i + k];
            int tot = (sum[i + k] - sum[i]) + (sum[l + k] - sum[l]) + (sum[r + k] - sum[r]);
            if (tot > maximum) {
                maximum = tot;
                ans[0] = l; ans[1] = i; ans[2] = r;
            }
        }
        
        return ans;
    }
}



1031. Maximum Sum of Two Non-Overlapping Subarrays
Given an array A of non-negative integers, return the maximum sum of elements in two non-overlapping (contiguous) subarrays, which have lengths L and M.  (For clarification, the L-length subarray could occur before or after the M-length subarray.)

Formally, return the largest V for which V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1]) and either:

0 <= i < i + L - 1 < j < j + M - 1 < A.length, or
0 <= j < j + M - 1 < i < i + L - 1 < A.length.
 

Example 1:

Input: A = [0,6,5,2,2,5,1,9,4], L = 1, M = 2
Output: 20
Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.
Example 2:

Input: A = [3,8,1,3,2,1,8,9,0], L = 3, M = 2
Output: 29
Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.
Example 3:

Input: A = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3
Output: 31
Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3.
 

Note:

L >= 1
M >= 1
L + M <= A.length <= 1000
0 <= A[i] <= 1000


class Solution {
    public int maxSumTwoNoOverlap(int[] A, int L, int M) {
        int res = 0, lMax = 0, mMax = 0, lSum = 0, mSum = 0;
        for (int i = 0; i < A.length; i++) {
            mSum += A[i];
            if (i - M >= 0) mSum -= A[i - M];
            if (i - M >= 0) lSum += A[i - M];
            if (i - M - L >= 0) lSum -= A[i - M - L];
            lMax = Math.max(lMax, lSum);
            res = Math.max(res, lMax + mSum);
        }
        
        lMax = mMax = lSum = mSum = 0;
        for (int i = 0; i < A.length; i++) {
            lSum += A[i];
            if (i - L >= 0) lSum -= A[i - L];
            if (i - L >= 0) mSum += A[i - L];
            if (i - L - M >= 0) mSum -= A[i - L - M];
            mMax = Math.max(mMax, mSum);
            res = Math.max(res, mMax + lSum);
        }
        
        return res;
    }
}

   /*
    you could either have-
L array appearing first and then M array
or
M array appearing first and then L array
Therefore for a given index i in the loop:
find maximum sum for L length before index i and add it with every M length sum right to it --------(equation 1)
find maximum sum for M length before index i and add it with every L length sum right to it---------(equation 2)
now in every loop do res = max(res , max( equation 1, equation 2))

This way overlapping is also avoided.
*/
